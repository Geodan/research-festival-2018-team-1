using System;
using System.Text;
using UnityEngine;
using uPLibrary.Networking.M2Mqtt;
using uPLibrary.Networking.M2Mqtt.Messages;

public class TestScript : MonoBehaviour {

	// Use this for initialization
	void Update ()
    {
        if (Input.GetButtonDown("Jump"))
        {
            SendServerMessage("arena/test", "This is a test. Don't panic!");
        }
    }

    public void SendServerMessage(string topicName, string serverMessage)
    {
        var broker = "broker.hivemq.com";
        var port = 1883;
        var topic = topicName;
        var message = serverMessage;

        var client = new MqttClient(broker);
        client.MqttMsgPublishReceived += client_MqttMsgPublishReceived;
        var clientId = Guid.NewGuid().ToString();
        client.Connect(clientId);
        client.Subscribe(new[] { topic }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });
        // client.Publish(topic, Encoding.Default.GetBytes(message));
        Debug.Log("klaar"); 
    }

    private static void client_MqttMsgPublishReceived(object sender, MqttMsgPublishEventArgs e)
    {
        var str = Encoding.Default.GetString(e.Message);
        Debug.Log("result: " + str);
    }
}
